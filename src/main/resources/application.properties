server.port=8090
server.contextPath=/api
# Justification: as for now we don't know the optimal number of threads, but the default (200) is clearly not optimal.
# Our current environments have 8 cores:
#  - OE can use 5 threads max. It can be loaded significantly, but this won't be too often. It can eat a lot of CPU,
#    but it still uses network to communicate so it will probably take 2-3 cores max even when significantly loaded.
#  - MARS is given 5 threads max. But it's not CPU-eating app since most of the time it executes SQL queries. So it
#    will eat 1-2 cores max.
# Therefore we're left with about 4 cores. Given that most of our work is DB queries and queries to OE/MARS it's
# probably fair to say that we can start more than 2 threads per core. But also there are other othreads in our app
# (DB Pool, cache tomcat internal needs) so we can't go too high.
server.tomcat.max-threads=16
server.compression.enabled=true
server.compression.mime-types=application/json,application/xml,text/html,text/xml,text/plain
db.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=1;DB_CLOSE_ON_EXIT=true
db.username=sa
db.password=
db.driver_class_name=org.h2.Driver
# Max size shouldn't differ from number of request handling threads - otherwise there will be extra connections
# or threads will be blocked waiting for connections to be released by other threads
db.pool.max_size=${server.tomcat.max-threads}
db.pool.min_size=1
# In case there are firewalls that can drop the connection or some other tools/network issues we should be able to
# a) maintain keep-alive messages so that no one abrupts the connection
# b) detect failures and re-create DB connections in the background instead of making user wait
db.pool.validation_period_millisec=180000
# If the pool doesn't return the value within this period, the exception will be raised. This can happen only if
# there are not enough connections in the pool at the moment and the pool tries to connect but DB doesn't respond.
db.pool.connection_timeout_millisec=10000
# A.k.a. Abandoned Connections Timeout=if our code borrowed the connection, but doesn't return it back to the pool.
# Usually means either connection leaks (forget to close it) or too long queries (which we don't have).
db.pool.unreturned_connection_timeout_millisec=600000

hibernate.dialect=org.hibernate.dialect.H2Dialect
hibernate.show_sql=false

spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
